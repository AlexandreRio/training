import "datatype.thingml"

thing fragment TimerMsgs {
	// Start the Timer
	message timer_start(delay : Integer);
	// Cancel the Timer
	message timer_cancel();
	// Notification that the timer has expired
	message timer_timeout();
}

thing fragment Timer includes TimerMsgs
{
	provided port timer
    {
		sends timer_timeout
		receives timer_start, timer_cancel
	}
}

thing fragment TimerClient includes TimerMsgs
{
	required port timer
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
}


/*thing HelloTimer includes TimerClient {

	readonly property period : Integer = 1000
	
	statechart behavior init Init {
	
		state Init {
			on entry do
				//TODO: start the timer every *period* milliseconds
                timer!timer_start(period)
			end
			
			transition -> Init //this will loop on the Init state, and start a new timer
			//event myPort?myMessage //TODO: make the transition to be triggered by a timer_timeout event received on the timer port
            event timer?timer_timeout
			action do
				print "hello\n"
			end
		
		}
	
	}

}*/

