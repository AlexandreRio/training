import "Decoder.thingml"
import "../Filter.thingml"
import "../datatypes.thingml"



thing Filter includes DecoderMsg{

    message output(comp : Integer);
	message tmp(pressure: Integer, temp: Integer, comp: Integer);
	message split(pressure: Integer, temp: Integer);



	function filterComp(pressure : Integer[], temp : Integer[], comp : Integer[]) : Integer do
	
	//ekstraher temperatur for hver av msg
	//gjør kalkulasjonen 
	//returner kompenserte verdier og kompensasjons verdi i en kombinert map
	
	//y = ay-1 + by-2 + cx-1 + dx-2
	
		/*
 	{"data" :
                {"pressure":[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
                "temperature":21.2,
                "sample_set":14,
                "sensor_id":"IsensU 1"
                },
	"status" :                           
                {"fn_id":"FN 1",
                "bt_rssi": -41,
                "last_resync": 7
                }
	}
	*/
	
	'
	
	var a = 1.994315;
	var b = -0.9943162;
	var c = 0.0973;
	var d = -0.0973;
	var coeff = 1;
	
	var presCoeff = 0.03051758;
	
	var comp = coeff* (a*'&comp&'[i-1] + b*'&comp&'[i-2] + c*'&temp&'[i-1]);
	var pressure = pressure - comp;
	
	return pressure;
	'
	end
	
	
	function filterComp(pressure: Integer, temp: Integer) : String 
	do
		'
		'&reading&'.data.pressure['&index&'] = pressure[0]
		'&index&'++
		if('&index&' == 8){
			return JSON.stringify('& reading & ')
		} else {
			return ''
		}'
	end
		
	function send(msg: String)  
	do
		'
		var json = JSON.parse('&msg&');
		'&reading&'= json
		'&index&' = 0
		var temperature = json.data.temperature/9;
		var pressure = json.data.pressure; 
		
		for (var i = 0; i < pressure.length; i++) {
		 	'output!split('pressure[i]','temperature')'
		}'
	end
	
	
	stream compansation @TTL1 "0" @TTL2 "7000" do 
		from e : [e1  : outputRecv?split  & e2 : outputRecv?output -> tmp(e1.pressure, e1.temp, e2.comp)]::lengthWindow(3,1)
		select compensated : filterComp(e.pressure[], e.temp[], e.comp[]), pressure : e.pressure[], temperature : e.temp
		action output!tmp(pressure, temperature, compensated)
	
	end
	
	property compensated : Map
	property reading : Map
	property index : Integer = 0
	
	statechart Filter init Active @debug "false" {
	
		state Active {
			on entry do
				print "Filter Ready"
				output!output(0)				
			end
			
			internal event e: decoder?decoded
			action do
				send(e.msg)
			end
			
			internal event e: outputRecv?tmp
			action do
				output!output(e.comp)
				
				//bygge opp struktur igjen
				compensated = filterComp(e.pressure, e.temp)
				if(not(compensated == "")) do
					filtered!decoded(compensated)
					//print("----------------------\n")
					//print(getJson(compensated))
					//print("----------------------\n")
				end
			end
		}
	}
	
	
	required port output {
		sends output, tmp,split
	}
	
	provided port outputRecv{
		receives output,tmp,split
	}
	
	
	required port decoder {
		receives decoded
	}
	
	provided port filtered {
		sends decoded
	}

}
configuration Filter {
	instance pfilter : Filter
	connector pfilter.output => pfilter.outputRecv  

}




