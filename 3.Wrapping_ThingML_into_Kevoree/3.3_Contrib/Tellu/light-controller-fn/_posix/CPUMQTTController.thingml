/*
 * File: MQTT_Subscriver.thingml
 * 
 * Description: This application allow remote control of the LED by MQTT. 
 * 				It listen to the topics ThingML and ThingML2 and switchs on and off the LED 
 * 				when LEDON/LEDOFF is received
 * 				It also publish when the LED is switched off on both topics, and when it's switched on
 * 				only on ThingML
 * 
 *
 * TODO: Compile this ThingML into posix compatible code, and cross compile it with the arduino-yun-cross-compiler
 * 		 docker container, then upload the executable on the Yun (CPU side) and run it.
*/

import "../lib/_Datatypes.thingml"

protocol Serial1;
protocol MQTT;

configuration MQTTButtonControllerCfg
@trace_level "3"
@c_compiler "/openwrt-yun/staging_dir/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-gcc"
@add_c_libraries "mosquitto"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/lib"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/lib"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/include"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/include"
{
	instance mc : MQTTController
	
	connector mc.Bridge over Serial1
	@serial_path_to_device "/dev/ttyATH0"
	@serial_baudrate "115200"
	@trace_level "3"
	
	connector mc.mqttport over MQTT
	@trace_level "3"
	@mqtt_broker_address "192.168.1.127"
	@mqtt_topic "ThingML"
	@mqtt_topic "ThingML2"
	@mqtt_multi_topic_publish_selection "true"
}

thing fragment Msgs {
	message LEDON() @code "66";
	message LEDOFF() @code "67";
}

thing fragment WSMsgs {
	message LEDisON(TopicID : UInt16) @code "101" @mqtt_topic_id "TopicID";
	message LEDisOFF(TopicID : UInt16) @code "102" @mqtt_topic_id "TopicID";
}

thing MQTTController includes Msgs, WSMsgs
@trace_level "3"
{
	
	required port Bridge {
		receives LEDON, LEDOFF
		sends LEDON, LEDOFF
	}
	
	required port mqttport {
		receives LEDON, LEDOFF
		sends LEDisON, LEDisOFF
	}
	
	statechart MQTTControllerChart init Init {
		state Init {
			on entry do
				'printf("[CPU] Init\n");'
			end
			transition -> Running
		}
		
		state Running {
			internal event Bridge?LEDON action do
				Bridge!LEDON()
				mqttport!LEDisON(0)
				'printf("[CPU] LEDON\n");'
			end
			internal event Bridge?LEDOFF action do
				Bridge!LEDOFF()
				mqttport!LEDisOFF(-1)
				'printf("[CPU] LEDOFF\n");'
			end
			internal event mqttport?LEDON action do
				Bridge!LEDON()
				'printf("[CPU] WS LEDON\n");'
			end
			internal event mqttport?LEDOFF action do
				Bridge!LEDOFF()
				'printf("[CPU] WS LEDOFF\n");'
			end
		}
	}
}

