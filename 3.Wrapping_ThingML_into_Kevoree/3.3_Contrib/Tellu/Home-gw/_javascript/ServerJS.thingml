import "../Server.thingml"

    
thing FallServer includes SensorServer
@pim "SensorServer"
@platform "javascript"
{

 	property reading : String
 	property fallMap : Map
 	property curFieldNode : Map
 	property curFallState : Map
 	property fallReport : String
 	property FALL_LIMIT : Integer = -4 @kevoree "true"
 	
 	
 	function initialize() do
 		''&fallMap&' = {};
 		'&curFieldNode&' = {};
 		'&curFallState&' = {}'
 	end
 	
 	
 	function fallControl(fallReport : String) : String do
 	
	 	//{"fall_index":0,"bt_rssi":0,"sensor_id":"0x0b","sample_set":120,"fn_id":"FN1"}
	 	
	 	'
	 	var fallReportJson = JSON.parse('&fallReport&');
	 	console.log("."); //need this to make the system run??
	 	
	 	var curFall = '&fallMap&'[fallReportJson.sensor_id];
	 	if(curFall){
	 		if(fallReportJson.sample_set == curFall.sample_set){
		 		if(fallReportJson.bt_rssi > curFall.bt_rssi){
		 			'&fallMap&'[fallReportJson.sensor_id] = fallReportJson;	
		 		}
		 	} else {
		 		'&fallMap&'[fallReportJson.sensor_id] = fallReportJson;
		 		return createFallReport(curFall);
		 	}
	 	} else {
	 		'&fallMap&'[fallReportJson.sensor_id] = fallReportJson;
	 	}
	 	return "";
	 	'
 	end

	function createFallReport(fallReport : Map) : String do
		'var json = {};
		var sensorId = '&fallReport&'.sensor_id;
		var fnId = '&fallReport&'.fn_id;
		var fallIndex = '&fallReport&'.fall_index;
		json.topic=sensorId+"/smarttracker/fallIndex";
		var msg = {};
		msg.deviceId = sensorId;
		var date = new Date();
		msg.observationTime=date.toISOString();		 
		var observations = [];
		msg.observations = observations;
		if(fallIndex < '&FALL_LIMIT&' && !'&curFallState&'[sensorId]) {
			observations[0] = {"health.event.meta": fallIndex};
			observations[1] = {"health.event": "fall"};
			observations[2] = {"tag.id" : fnId};
			observations[3] = {"tag.type" : "beacon"};
			'&curFieldNode&'[sensorId] = fnId;
			'&curFallState&'[sensorId] = true;
			json.message=JSON.stringify(msg);
			var res = JSON.stringify(json);
			return res;
		} else if(fallIndex > '&FALL_LIMIT&') {
			'&curFallState&'[sensorId] = false;
		} 
		
		if(fnId != '&curFieldNode&'[sensorId]){
			observations[0] = {"tag.id" : fnId};
			observations[1] = {"tag.type" : "beacon"};
			'&curFieldNode&'[sensorId] = fnId;
			json.message=JSON.stringify(msg);
			var res = JSON.stringify(json);
			return res;
		}
		return "";
		'
	end

	
	  statechart Server init reading {
               
        state reading {
        
         	on entry do
         		initialize()
         		print "Server starting!\n"
         	end
            
            internal event readingJson : sensor_mqtt?readingJson
            action do
            	print "Sensor reading"
                print readingJson.value
                fallReport = fallControl(readingJson.value)
                if(not(fallReport==""))
                do                                            
            		print("to send")
            		smarttracker!reading(fallReport)
                end                            
            end     
        }
    }
}

configuration HomeGW {
    instance server : FallServer   
}