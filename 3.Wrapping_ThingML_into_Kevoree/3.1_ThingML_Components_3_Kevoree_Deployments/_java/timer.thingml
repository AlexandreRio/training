import "../timer.thingml"

datatype JThread
@java_type "Thread";

// Manage a set of software timers.
thing TimerJava includes Timer
@pim "Timer"
@platform "java"
{
    property timer : JThread

    statechart SoftTimer init default {
        state default {

          internal start
            event m : timer?timer_start
            guard m.delay > 0
            action do
             if (not(timer == 'null')) do
                '' & timer & '.interrupt();'
             end
             'Thread t = new Thread(){
                public void run() {
				try {
					Thread.sleep(' & m.delay & ');'
					timer!timer_timeout()
				'} catch (Exception ex) {
				}
				interrupt();
			    }
              };'
             timer = 't' 
              '' & timer & '.start();'                
            end
            
          internal cancel
            event m : timer?timer_cancel
            action do
              if (not(timer == 'null')) do
                '' & timer & '.interrupt();'
              end
            end
        }
    }
}

/**
In this configuration, all the things are already connected.
Everything will be managed by ThingML, resulting in a single Kevoree 
component, with no exposed port.
The dynamic adaptation capabilities of this configuration will be limited
to changing the value of parameters. It is not possible to change the way
timer and client will communicate, or to replace the client by an alternative client. 
*/
configuration Deployment1 {
    instance timer : TimerJava
    instance client : SimpleTimerClient
    connector client.timer => timer.timer    
}



/**
In this configuration, none of the components is connected.
The logic of the components will be managed by ThingML and wrapped as
a single Kevoree component. All the communication logic will be left to Kevoree. 
In other words, the ports left unconnected in the ThingML configuration will be exposed
as Kevoree ports, that should be connected later on in your Kevoree model,
using channels.
The dynamic adaptation capabilities now include the ability to dynamically change the
way timer and client will communicate.
*/
/*configuration Deployment2{
    instance timer : TimerJava
    instance client : SimpleTimerClient 
}*/




/**
In this third deployment, we will use two ThingML configuration. 
Eeach configuration will be wrapped as a separate Kevoree component.
The dynamica adaptation capabilities now include the ability to manage the lifecycle
of both components individually (e.g. the client can be changed dynamically).
*/
/*configuration TimerJ {
    instance timer : TimerJava    
}

configuration TimerClientJ {
    instance client : SimpleTimerClient    
}*/